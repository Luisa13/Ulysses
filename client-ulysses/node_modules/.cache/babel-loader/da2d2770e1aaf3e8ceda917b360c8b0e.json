{"ast":null,"code":"var _jsxFileName = \"/home/luisa/github/Ulysses/client-ulysses/src/presentation/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //import {useHistory} from 'react-router-dom';\n\nimport { Button, Form } from 'react-bootstrap';\nimport * as Yup from 'yup'; //import {authApi, userApi} from '../api';\n//import {useAppContext} from '../hooks';\n\nimport * as ApiService from \"../Service/ApiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  //const history = useHistory();\n  //const {currentUser, setCurrentUser} = useAppContext();\n  const [errorMessage, setErrorMessage] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const form = {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validationSchema: Yup.object().shape({\n      username: Yup.string().required('Required'),\n      password: Yup.string().required('Required')\n    })\n  };\n\n  const test = async () => {\n    console.log(\"Login... \");\n  };\n\n  const handleSubmit = async (values, formikHelpers) => {\n    debugger;\n\n    try {\n      console.log(\"Login... \");\n      const token = await ApiService.login(values.username, values.password); //localStorage.setItem('token', token);\n      // Get the current user's information next\n      //const user = await userApi.currentUser();\n      // Setting the current user will re-render the routes to be the available in App.tsx\n\n      formikHelpers.setSubmitting(false); // setCurrentUser(user);\n    } catch (error) {\n      formikHelpers.setSubmitting(false);\n\n      if (error instanceof TypeError) {\n        setErrorMessage('Unable to connect to service.');\n      } else {\n        setErrorMessage(error.message);\n      }\n    }\n  };\n  /*useEffect(() => {\n    if (currentUser) {\n      history.push('/users');\n    }\n  }, [currentUser, history]);*/\n\n  /*return (\n    <Container fluid className=\"Login mt-5\">\n      <Row>\n        <Col>\n          <Card className=\"m-auto\">\n            <Card.Header className=\"font-weight-bold text-center\">Login</Card.Header>\n            <Card.Body>\n              {errorMessage && <p className=\"text-center text-danger\">{errorMessage}</p>}\n              <Formik initialValues={form.initialValues}\n                      validationSchema={form.validationSchema}\n                      onSubmit={handleSubmit}>\n                {(formikProps: FormikProps<LoginFormFields>) =>\n                  <Form onSubmit={formikProps.handleSubmit}>\n                    <Form.Group controlId=\"username\">\n                      <Form.Label>Username</Form.Label>\n                      <Field name=\"username\">\n                        {({field, meta}: FieldProps) => (\n                          <Form.Control {...field}\n                                        placeholder=\"Username\"\n                                        autoComplete=\"username\"\n                                        isInvalid={!!(meta.touched && meta.error)}/>\n                        )}\n                      </Field>\n                      <Form.Control.Feedback type=\"invalid\">\n                        {formikProps.errors.username}\n                      </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group controlId=\"password\">\n                      <Form.Label>Password</Form.Label>\n                      <Field name=\"password\">\n                        {({field, meta}: FieldProps) => (\n                          <Form.Control {...field}\n                                        type=\"password\"\n                                        autoComplete=\"current-password\"\n                                        placeholder=\"Password\"\n                                        isInvalid={!!(meta.touched && meta.error)}/>\n                        )}\n                      </Field>\n                      <Form.Control.Feedback type=\"invalid\">\n                        {formikProps.errors.password}\n                      </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group>\n                      <Button \n                      variant=\"primary\"\n                      type=\"submit\"\n                              block\n                              disabled={!formikProps.isValid || formikProps.isSubmitting}>\n                        Login\n                      </Button>\n                    </Form.Group>\n                  </Form>\n                }\n              </Formik>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );*/\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Log in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"username\",\n        className: \"form-control\",\n        placeholder: \"Enter password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        placeholder: \"Enter password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-control custom-checkbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          className: \"custom-control-input\",\n          id: \"customCheck1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"custom-control-label\",\n          htmlFor: \"customCheck1\",\n          children: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: test,\n      className: \"btn btn-dark btn-lg btn-block\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"forgot-password text-right\",\n      children: [\"Forgot \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        children: \"password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this)\n  /* }\n   </Formik>*/\n  ;\n};\n\n_s(Login, \"jnQJdWpVeUNl8F93ZJDucEdlnI8=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/luisa/github/Ulysses/client-ulysses/src/presentation/Login.tsx"],"names":["React","useState","Button","Form","Yup","ApiService","Login","errorMessage","setErrorMessage","username","setUsername","password","setPassword","form","initialValues","validationSchema","object","shape","string","required","test","console","log","handleSubmit","values","formikHelpers","token","login","setSubmitting","error","TypeError","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;AACA,SAAQC,MAAR,EAAsCC,IAAtC,QAAsD,iBAAtD;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CAEA;AACA;;AACA,OAAO,KAAMC,UAAb,MAA6B,uBAA7B;;;AAOA,MAAMC,KAAe,GAAG,MAAM;AAAA;;AAC5B;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAS,EAAT,CAAhD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMY,IAA6E,GAAG;AACpFC,IAAAA,aAAa,EAAE;AACbL,MAAAA,QAAQ,EAAE,EADG;AAEbE,MAAAA,QAAQ,EAAE;AAFG,KADqE;AAKpFI,IAAAA,gBAAgB,EAAEX,GAAG,CAACY,MAAJ,GAAaC,KAAb,CAAmB;AACnCR,MAAAA,QAAQ,EAAEL,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CADyB;AAEnCR,MAAAA,QAAQ,EAAEP,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,UAAtB;AAFyB,KAAnB;AALkE,GAAtF;;AAWA,QAAMC,IAAI,GAAG,YAAW;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,OAAOC,MAAP,EAAgCC,aAAhC,KAAkF;AACrG;;AACA,QAAI;AACFJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,YAAMI,KAAK,GAAG,MAAMrB,UAAU,CAACsB,KAAX,CAAiBH,MAAM,CAACf,QAAxB,EAAkCe,MAAM,CAACb,QAAzC,CAApB,CAFE,CAGF;AACA;AACA;AACA;;AACAc,MAAAA,aAAa,CAACG,aAAd,CAA4B,KAA5B,EAPE,CAQH;AACA,KATD,CASE,OAAOC,KAAP,EAAc;AACdJ,MAAAA,aAAa,CAACG,aAAd,CAA4B,KAA5B;;AACA,UAAIC,KAAK,YAAYC,SAArB,EAAgC;AAC9BtB,QAAAA,eAAe,CAAC,+BAAD,CAAf;AACD,OAFD,MAEO;AACLA,QAAAA,eAAe,CAACqB,KAAK,CAACE,OAAP,CAAf;AACD;AACF;AACF,GAnBD;AAqBA;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,sBACM,QAAC,IAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEK;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,SAAS,EAAC,cAAjC;AAAgD,QAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFL,eAOI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,SAAS,EAAC,cAAjC;AAAgD,QAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAYI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,SAAS,EAAC,sBAAjC;AAAwD,UAAA,EAAE,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,SAAS,EAAC,sBAAjB;AAAwC,UAAA,OAAO,EAAC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAZJ,eAmBI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEX,IAAjB;AAAuB,MAAA,SAAS,EAAC,+BAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ,eAoBI;AAAG,MAAA,SAAS,EAAC,4BAAb;AAAA,yCACS;AAAG,QAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADT;AAAA;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBL;AACH;AA3BE;AA6BD,CA3ID;;GAAMd,K;;KAAAA,K;AA6IN,eAAeA,KAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\n//import {useHistory} from 'react-router-dom';\nimport {Button, Card, Col, Container, Form, Row} from 'react-bootstrap';\nimport {Field, FieldProps, Formik, FormikHelpers, FormikProps} from 'formik';\nimport * as Yup from 'yup';\n\n//import {authApi, userApi} from '../api';\n//import {useAppContext} from '../hooks';\nimport * as  ApiService from \"../Service/ApiService\";\n\ntype LoginFormFields = {\n  username: string\n  password: string\n}\n\nconst Login: React.FC = () => {\n  //const history = useHistory();\n  //const {currentUser, setCurrentUser} = useAppContext();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const form: {initialValues: LoginFormFields, validationSchema: Yup.AnyObjectSchema} = {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validationSchema: Yup.object().shape({\n      username: Yup.string().required('Required'),\n      password: Yup.string().required('Required')\n    })\n  };\n\n  const test = async () =>{\n    console.log(\"Login... \");\n  }\n\n  const handleSubmit = async (values: LoginFormFields, formikHelpers: FormikHelpers<LoginFormFields>) => {\n    debugger;\n    try {\n      console.log(\"Login... \");\n      const token = await ApiService.login(values.username, values.password);\n      //localStorage.setItem('token', token);\n      // Get the current user's information next\n      //const user = await userApi.currentUser();\n      // Setting the current user will re-render the routes to be the available in App.tsx\n      formikHelpers.setSubmitting(false);\n     // setCurrentUser(user);\n    } catch (error) {\n      formikHelpers.setSubmitting(false);\n      if (error instanceof TypeError) {\n        setErrorMessage('Unable to connect to service.');\n      } else {\n        setErrorMessage(error.message);\n      }\n    }\n  };\n\n  /*useEffect(() => {\n    if (currentUser) {\n      history.push('/users');\n    }\n  }, [currentUser, history]);*/\n\n  /*return (\n    <Container fluid className=\"Login mt-5\">\n      <Row>\n        <Col>\n          <Card className=\"m-auto\">\n            <Card.Header className=\"font-weight-bold text-center\">Login</Card.Header>\n            <Card.Body>\n              {errorMessage && <p className=\"text-center text-danger\">{errorMessage}</p>}\n              <Formik initialValues={form.initialValues}\n                      validationSchema={form.validationSchema}\n                      onSubmit={handleSubmit}>\n                {(formikProps: FormikProps<LoginFormFields>) =>\n                  <Form onSubmit={formikProps.handleSubmit}>\n                    <Form.Group controlId=\"username\">\n                      <Form.Label>Username</Form.Label>\n                      <Field name=\"username\">\n                        {({field, meta}: FieldProps) => (\n                          <Form.Control {...field}\n                                        placeholder=\"Username\"\n                                        autoComplete=\"username\"\n                                        isInvalid={!!(meta.touched && meta.error)}/>\n                        )}\n                      </Field>\n                      <Form.Control.Feedback type=\"invalid\">\n                        {formikProps.errors.username}\n                      </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group controlId=\"password\">\n                      <Form.Label>Password</Form.Label>\n                      <Field name=\"password\">\n                        {({field, meta}: FieldProps) => (\n                          <Form.Control {...field}\n                                        type=\"password\"\n                                        autoComplete=\"current-password\"\n                                        placeholder=\"Password\"\n                                        isInvalid={!!(meta.touched && meta.error)}/>\n                        )}\n                      </Field>\n                      <Form.Control.Feedback type=\"invalid\">\n                        {formikProps.errors.password}\n                      </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group>\n                      <Button \n                      variant=\"primary\"\n                      type=\"submit\"\n                              block\n                              disabled={!formikProps.isValid || formikProps.isSubmitting}>\n                        Login\n                      </Button>\n                    </Form.Group>\n                  </Form>\n                }\n              </Formik>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );*/\n\n  return(\n        <Form>   \n            <h3>Log in</h3>\n             <div className=\"form-group\">\n                <label>Username</label>\n                <input type=\"username\" className=\"form-control\" placeholder=\"Enter password\" />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n            </div>\n\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                    <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\n                </div>\n            </div>\n\n            <Button onClick={test} className=\"btn btn-dark btn-lg btn-block\" >Login</Button>\n            <p className=\"forgot-password text-right\">\n              Forgot <a href=\"#\">password?</a>\n            </p>\n\n        </Form>\n   /* }\n    </Formik>*/\n  );\n};\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}